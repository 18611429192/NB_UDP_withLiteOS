<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [MQTT_and_LiteOS\MQTT_and_LiteOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image MQTT_and_LiteOS\MQTT_and_LiteOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Nov 10 10:45:49 2020
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[99]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[99]">_Error_Handler</a><BR>
 <LI><a href="#[56]">osIdleTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">osIdleTask</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[50]">CGATT_task</a> from main.o(i.CGATT_task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[3b]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel7_IRQHandler</a> from stm32l4xx_it.o(i.DMA2_Channel7_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">EXTI15_10_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32l4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32l4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">LED_task</a> from main.o(i.LED_task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[3c]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3d]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">LPUART1_IRQHandler</a> from stm32l4xx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2c]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from los_hwi.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">TIM6_DAC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[52]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[55]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[53]">UART_DMAReceiveCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[54]">UART_DMARxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[2d]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2e]">USART2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2f]">USART3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[58]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[4e]">alive_task</a> from main.o(i.alive_task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[51]">comprehension_task</a> from main.o(i.comprehension_task) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[57]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[56]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.LOS_TaskCreateOnly)
 <LI><a href="#[56]">osIdleTask</a> from los_task.o(i.osIdleTask) referenced from los_task.o(i.osIdleTaskCreate)
 <LI><a href="#[5a]">osSwTmrTask</a> from los_swtmr.o(i.osSwTmrTask) referenced from los_swtmr.o(i.osSwTmrTaskCreate)
 <LI><a href="#[5d]">osTaskEntry</a> from los_task.o(i.osTaskEntry) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[5c]">osTaskExit</a> from los_hw.o(i.osTaskExit) referenced from los_hw.o(i.osTskStackInit)
 <LI><a href="#[5b]">osTaskSwitchCheck</a> from los_task.o(i.osTaskSwitchCheck) referenced from los_task.o(i.osTaskMonInit)
 <LI><a href="#[59]">timer1_callback</a> from main.o(i.timer1_callback) referenced from main.o(i.main)
 <LI><a href="#[4f]">udpsocket_task</a> from main.o(i.udpsocket_task) referenced from main.o(i.AppTaskCreate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[b3]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[b6]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[bf]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f7]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alive_task
</UL>

<P><STRONG><a name="[fe]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayToStr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLECallBack
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
</UL>

<P><STRONG><a name="[65]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fd]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, strstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
</UL>

<P><STRONG><a name="[fc]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strncpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayToStr
</UL>

<P><STRONG><a name="[77]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayToStr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed_key
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
</UL>

<P><STRONG><a name="[fb]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strncat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayToStr
</UL>

<P><STRONG><a name="[73]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CGATT_task</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.CGATT_task))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysizeof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA2_Channel7_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DeQueue</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, queue.o(i.DeQueue))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>EnQueue</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, queue.o(i.EnQueue))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
</UL>

<P><STRONG><a name="[76]"></a>Fixed_key</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hex_dec.o(i.Fixed_key))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
</UL>

<P><STRONG><a name="[8a]"></a>HAL_DMA_Abort</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[8e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel7_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[78]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[7a]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_GPIO_Init</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_task
</UL>

<P><STRONG><a name="[e1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[7b]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>HAL_InitTick</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_MspInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e5]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[e8]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[82]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 682 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[86]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[87]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1202 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[eb]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[90]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLECallBack
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
</UL>

<P><STRONG><a name="[8f]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_UART_MspInit</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLECallBack
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
</UL>

<P><STRONG><a name="[ed]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[6d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLECallBack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_create_tcpsocket
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGATT_task
</UL>

<P><STRONG><a name="[91]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>InitQueue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>LED_task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.LED_task))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[d1]"></a>LOS_Align</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_misc.o(i.LOS_Align))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[c4]"></a>LOS_ErrHandle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, los_err.o(i.LOS_ErrHandle))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[9d]"></a>LOS_KernelInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, los_init.o(i.LOS_KernelInit))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>LOS_MS2Tick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_sys.o(i.LOS_MS2Tick))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>LOS_MemAlloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, los_memory.o(i.LOS_MemAlloc))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[ad]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_memory.o(i.LOS_MemAllocAlign))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[af]"></a>LOS_MemFree</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, los_memory.o(i.LOS_MemFree))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
</UL>

<P><STRONG><a name="[b2]"></a>LOS_MemInit</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, los_memory.o(i.LOS_MemInit))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[b7]"></a>LOS_QueueCreate</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, los_queue.o(i.LOS_QueueCreate))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[b8]"></a>LOS_QueueReadCopy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, los_queue.o(i.LOS_QueueReadCopy))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[bb]"></a>LOS_QueueWriteCopy</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, los_queue.o(i.LOS_QueueWriteCopy))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[bd]"></a>LOS_Schedule</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, los_hw.o(i.LOS_Schedule))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[68]"></a>LOS_SemCreate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, los_sem.o(i.LOS_SemCreate))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[c1]"></a>LOS_SemPend</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, los_sem.o(i.LOS_SemPend))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpsocket_task
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>LOS_SemPost</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, los_sem.o(i.LOS_SemPost))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGATT_task
</UL>

<P><STRONG><a name="[c6]"></a>LOS_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, los_init.o(i.LOS_Start))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>LOS_SwtmrCreate</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, los_swtmr.o(i.LOS_SwtmrCreate))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>LOS_SwtmrStart</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, los_swtmr.o(i.LOS_SwtmrStart))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alive_task
</UL>

<P><STRONG><a name="[cd]"></a>LOS_SwtmrStop</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, los_swtmr.o(i.LOS_SwtmrStop))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
</UL>

<P><STRONG><a name="[69]"></a>LOS_TaskCreate</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskCreate))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
</UL>

<P><STRONG><a name="[ce]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 310 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskCreateOnly))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[6b]"></a>LOS_TaskDelay</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskDelay))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alive_task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_create_tcpsocket
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_task
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGATT_task
</UL>

<P><STRONG><a name="[d7]"></a>LOS_TaskDelete</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskDelete))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
</UL>

<P><STRONG><a name="[d9]"></a>LOS_TaskResume</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskResume))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpsocket_task
</UL>

<P><STRONG><a name="[70]"></a>LOS_TaskSuspend</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskSuspend))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGATT_task
</UL>

<P><STRONG><a name="[d6]"></a>LOS_TaskYield</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, los_task.o(i.LOS_TaskYield))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
</UL>

<P><STRONG><a name="[113]"></a>LOS_TickCountGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_sys.o(i.LOS_TickCountGet))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[40]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.LPUART1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_IDLECallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>LPUART_IDLECallBack</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.LPUART_IDLECallBack))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>MX_DMA_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>MX_GPIO_Init</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usart.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>NB_create_tcpsocket</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.NB_create_tcpsocket))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysizeof
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpsocket_task
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_hwi.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>SystemClock_Config</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[96]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[94]"></a>UART_SetConfig</STRONG> (Thumb, 554 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[9b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[2d]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLECallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>USART_IDLECallBack</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.USART_IDLECallBack))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysizeof
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[f2]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_callback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alive_task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_create_tcpsocket
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
</UL>

<P><STRONG><a name="[f4]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fa]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayToStr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
</UL>

<P><STRONG><a name="[4e]"></a>alive_task</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.alive_task))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[f9]"></a>arrayToStr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, hex_dec.o(i.arrayToStr))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
</UL>

<P><STRONG><a name="[51]"></a>comprehension_task</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(i.comprehension_task))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed_key
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.fputc))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6c]"></a>mysizeof</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.mysizeof))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLECallBack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_create_tcpsocket
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGATT_task
</UL>

<P><STRONG><a name="[6e]"></a>mystrstr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.mystrstr))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comprehension_task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_create_tcpsocket
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGATT_task
</UL>

<P><STRONG><a name="[100]"></a>osAlarmHeapInfo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, los_heap.o(i.osAlarmHeapInfo))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[10e]"></a>osAtomicBitsetClearBit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetClearBit))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[10b]"></a>osAtomicBitsetFindClearAndSet</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetFindClearAndSet))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>

<P><STRONG><a name="[10d]"></a>osAtomicBitsetGetBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetGetBit))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[102]"></a>osAtomicBitsetInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetInit))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[ac]"></a>osHeapAlloc</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, los_heap.o(i.osHeapAlloc))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[ae]"></a>osHeapAllocAlign</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, los_heap.o(i.osHeapAllocAlign))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
</UL>

<P><STRONG><a name="[b1]"></a>osHeapFree</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, los_heap.o(i.osHeapFree))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[b4]"></a>osHeapInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, los_heap.o(i.osHeapInit))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[103]"></a>osHeapPrvGetNext</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, los_heap.o(i.osHeapPrvGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[101]"></a>osHeapStatisticsGet</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, los_heap.o(i.osHeapStatisticsGet))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[56]"></a>osIdleTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, los_task.o(i.osIdleTask))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> los_task.o(i.LOS_TaskCreateOnly)
<LI> los_task.o(i.osIdleTaskCreate)
</UL>
<P><STRONG><a name="[a6]"></a>osIdleTaskCreate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, los_task.o(i.osIdleTaskCreate))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[c2]"></a>osIntNumGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_hwi.o(i.osIntNumGet))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>

<P><STRONG><a name="[9e]"></a>osMemSystemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, los_memory.o(i.osMemSystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[a2]"></a>osMuxInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, los_mux.o(i.osMuxInit))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[d4]"></a>osPriqueueDequeue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueDequeue))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[cf]"></a>osPriqueueEnqueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueEnqueue))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[105]"></a>osPriqueueInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueInit))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[da]"></a>osPriqueueSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueSize))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[be]"></a>osPriqueueTop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_priqueue.o(i.osPriqueueTop))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[a3]"></a>osQueueInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, los_queue.o(i.osQueueInit))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[ba]"></a>osQueueOperate</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, los_queue.o(i.osQueueOperate))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[d0]"></a>osSchedule</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_hw.o(i.osSchedule))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[c0]"></a>osSemCreate</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, los_sem.o(i.osSemCreate))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
</UL>

<P><STRONG><a name="[a1]"></a>osSemInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, los_sem.o(i.osSemInit))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[10a]"></a>osSlabAllocatorAlloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_slab.o(i.osSlabAllocatorAlloc))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[10c]"></a>osSlabAllocatorFree</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, los_slab.o(i.osSlabAllocatorFree))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[10f]"></a>osSlabAllocatorNew</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, los_slab.o(i.osSlabAllocatorNew))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[111]"></a>osSlabBlockHeadFill</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabBlockHeadFill))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[110]"></a>osSlabCtrlHdrGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_memory.o(i.osSlabCtrlHdrGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[ab]"></a>osSlabMemAlloc</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabMemAlloc))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabBlockHeadFill
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[b0]"></a>osSlabMemFree</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabMemFree))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[b5]"></a>osSlabMemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, los_slabmem.o(i.osSlabMemInit))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[a4]"></a>osSwTmrInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwTmrInit))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[cc]"></a>osSwTmrStart</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwTmrStart))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[5a]"></a>osSwTmrTask</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwTmrTask))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(i.osSwTmrTaskCreate)
</UL>
<P><STRONG><a name="[112]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwTmrTaskCreate))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[116]"></a>osSwtmrScan</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwtmrScan))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[cb]"></a>osSwtmrStop</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwtmrStop))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>

<P><STRONG><a name="[d5]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, los_task.o(i.osTaskAdd2TimerList))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>

<P><STRONG><a name="[5d]"></a>osTaskEntry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, los_task.o(i.osTaskEntry))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[5c]"></a>osTaskExit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_hw.o(i.osTaskExit))
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(i.osTskStackInit)
</UL>
<P><STRONG><a name="[9f]"></a>osTaskInit</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, los_task.o(i.osTaskInit))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[a0]"></a>osTaskMonInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_task.o(i.osTaskMonInit))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[117]"></a>osTaskScan</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, los_task.o(i.osTaskScan))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[5b]"></a>osTaskSwitchCheck</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, los_task.o(i.osTaskSwitchCheck))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(i.osTaskMonInit)
</UL>
<P><STRONG><a name="[c3]"></a>osTaskWait</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, los_task.o(i.osTaskWait))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[c5]"></a>osTaskWake</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, los_task.o(i.osTaskWake))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[e6]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, los_tick.o(i.osTickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>osTickStart</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, los_hw_tick.o(i.osTickStart))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[d8]"></a>osTimerListDelete</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, los_task.o(i.osTimerListDelete))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>

<P><STRONG><a name="[118]"></a>osTimesliceCheck</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceCheck))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[a5]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(i.osTimesliceInit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[d3]"></a>osTskStackInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, los_hw.o(i.osTskStackInit))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[f8]"></a>send_UDP_to_Ali</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, main.o(i.send_UDP_to_Ali))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayToStr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrstr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysizeof
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_callback
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alive_task
</UL>

<P><STRONG><a name="[59]"></a>timer1_callback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.timer1_callback))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_to_Ali
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4f]"></a>udpsocket_task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.udpsocket_task))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_create_tcpsocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[67]"></a>AppTaskCreate</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, main.o(i.AppTaskCreate))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[55]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[53]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[54]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[8c]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[8b]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[88]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[83]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[79]"></a>DMA_SetConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[81]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[114]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwTmrTimeoutHandle))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[115]"></a>osSwtmrDelete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_swtmr.o(i.osSwtmrDelete))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[a8]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[d2]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[a7]"></a>LOS_ListTailInsert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(i.LOS_ListTailInsert))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[104]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[108]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[106]"></a>osQueueBufferOperate</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, los_queue.o(i.osQueueBufferOperate))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[b9]"></a>osQueueReadParameterCheck</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, los_queue.o(i.osQueueReadParameterCheck))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>

<P><STRONG><a name="[bc]"></a>osQueueWriteParameterCheck</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, los_queue.o(i.osQueueWriteParameterCheck))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>

<P><STRONG><a name="[109]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(i.LOS_ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
</UL>

<P><STRONG><a name="[f3]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 0 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[f6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[58]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
